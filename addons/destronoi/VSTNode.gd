@tool
class_name VSTNode
"""
Author: George Power <george@georgepower.dev>
"""
## A node in a Voronoi Subdivision Tree.
##
## Despite the name, [VSTNode] does [b]not[/b] inheret from [Node] and
## therefore cannot be used as a scene object. A [VSTNode] is used in the 
## construction of a Voronoi Subdivison Tree (VST). A VST functions as a binary
## tree where a [VSTNode] contains a [MeshInstance3D] and 0 to 2 children. A 
## [VSTNode] without children is considered a leaf.

## An enum to define laterality. A root VSTNode would have no laterality as it
## has no parent VSTNodes. Any child VSTNode must have a laterality of left or right.
enum Laterality {NONE = 0, LEFT, RIGHT}
## The ArrayMesh data of the current VSTNode. If not the root node of the VST,
## this data is generated by [method DestronoiNode.bisect].
var _mesh_instance: MeshInstance3D = null
## An array of sites. A site is a 3-D point in space, typically placed within
## the volume of the mesh.[br]A VSTNode has 0 or 2 sites. A pair of sites are used
## to define a 3-D plane for use in [method DestronoiNode.bisect].
var _sites: PackedVector3Array
## The left child node.
var _left: VSTNode = null
## The right child node.
var _right: VSTNode = null
## The depth level in the VST. The root is the only node at level 0.
var _level: int = 0
## The laterality of the current VSTNode in relation to its parent. 
var _laterality: int = Laterality.NONE

## Initializes a VSTNode using mesh data, a depth level, and a laterality value. 
func _init(mesh_instance: MeshInstance3D, level: int = 0, lat: int = Laterality.NONE):
	_mesh_instance = mesh_instance
	_level = level
	_laterality = lat

## Returns the [Material] for a specified surface by index (0 by default).
## Returns [code]null[/code] if index is out of bounds.
func get_override_material(index: int = 0):
	if index > _mesh_instance.get_surface_override_material_count() - 1: return null 
	var mat := _mesh_instance.get_surface_override_material(index)
	return mat

## Returns the number of sites. Should be 0 or 2, otherwise something has gone wrong.
func get_site_count() -> int:
	return _sites.size()

## Recursively populates [param out_arr] with each leaf [VSTNode].
## [br]Returns an [Array] containing the [VSTNode]s. Returns an empty [Array]
## if there are no child [VSTNode]s.
## [br]For proper usage: [br][param root] must be a valid [VSTNode]. [br][param out_arr] must be a valid (preferably empty) [Array]. [br]For instance:
## [br][code]myVSTNode.get_leaf_nodes()[/code] is improper usage and will return an empty array.
## [br][code]myVSTNode.get_leaf_nodes(myVSTNode, myArray)[/code] is valid.
func get_leaf_nodes(root: VSTNode = null, out_arr: Array = []) -> Array:
	if(root == null):
		return [];
	if(root._left == null && root._right == null):
		out_arr.append(root)
		return [root]
	if(root._left != null):
		get_leaf_nodes(root._left, out_arr)
	if(root._right != null):
		get_leaf_nodes(root._right, out_arr)
	return []

## Recursively populates [param out_arr] with [VSTNode]s of right [enum Laterality] at a certain depth level [param lim].
## [br]Returns an array containing the leaf VSTNodes. Returns an empty array if
## there are no child VSTNodes with right [enum Laterality].
## [br]If [param lim] exceeds the maximum value of [param level], the VSTNodes 
## with a depth of [param level] will be returned.
## [br][br]For proper usage: [br][param root] must be a valid VSTNode [br][param level] and [param lim] must be positive integers. [br]For instance:
## [br][code]myVSTNode.get_right_leaf_nodes()[/code] is improper usage and will return an empty array.
## [br][code]myVSTNode.get_right_leaf_nodes(myVSTNode, myArray)[/code] is valid.
## [br][code]myVSTNode.get_right_leaf_nodes(myVSTNode, myArray, 3)[/code] is valid.
## [br][code]myVSTNode.get_right_leaf_nodes(myVSTNode, myArray, 2, 0)[/code] is valid.
func get_right_leaf_nodes(root: VSTNode = null, out_arr: Array = [], lim: int = 1, level: int = 0) -> Array:
	if(root == null):
		return [];
	if(root._left == null && root._right == null) || level == lim:
		out_arr.append(root)
		return [root]
	if(root._left != null && level > 0):
		get_right_leaf_nodes(root._left, out_arr, lim, level+1)
	if(root._right != null):
		get_right_leaf_nodes(root._right, out_arr, lim, level+1)
	return []

## Recursively populates [param out_arr] with [VSTNode]s of left [enum Laterality] at a certain depth level [param lim].
## [br]Returns an array containing the leaf VSTNodes. Returns an empty array if
## there are no child VSTNodes with left [enum Laterality].
## [br]If [param lim] exceeds the maximum value of [param level], the VSTNodes 
## with a depth of [param level] will be returned.
## [br][br]For proper usage: [br][param root] must be a valid VSTNode [br][param level] and [param lim] must be positive integers. [br]For instance:
## [br][code]myVSTNode.get_left_leaf_nodes()[/code] is improper usage and will return an empty array.
## [br][code]myVSTNode.get_left_leaf_nodes(myVSTNode, myArray)[/code] is valid.
## [br][code]myVSTNode.get_left_leaf_nodes(myVSTNode, myArray, 3)[/code] is valid.
## [br][code]myVSTNode.get_left_leaf_nodes(myVSTNode, myArray, 2, 0)[/code] is valid.
func get_left_leaf_nodes(root: VSTNode = null, out_arr: Array = [], lim: int = 1, level: int = 0) -> Array:
	if(root == null):
		return [];
	if(root._left == null && root._right == null) || level == lim:
		out_arr.append(root)
		return [root]
	if(root._left != null):
		get_left_leaf_nodes(root._left, out_arr, lim, level+1)
	if(root._right != null && level > 0):
		get_left_leaf_nodes(root._right, out_arr, lim, level+1)
	return []

func _to_string():
	return "VSTNode {mesh}".format({"mesh":_mesh_instance})
